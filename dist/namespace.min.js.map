{"version":3,"file":"namespace.min.js","sources":["../src/namespace.ts"],"sourcesContent":["/** Namespace class */\nexport default class Namespace {\n  static Default = Namespace;\n\n  constructor(name: string | Array<string>) {\n    this.validate(name);\n    const p = this.parseName(name);\n    const n = p.shift();\n    if (this.init(n)) {\n      const ns = new Namespace.Default(p);\n      ns.applyTo(this, n as string);\n    }\n  }\n\n  private parseName(name: string | Array<string>) {\n    return Array.isArray(name) ? name : name.split(/[\\[\\].\"']/gi).filter(x => !!x && !!x.trim())\n  }\n\n  protected validate(name: string | Array<string>) {\n    if (!name) {\n      throw new Error('The Namespace name doesn\\'t exists');\n    }\n  }\n\n  protected init(name: string | undefined): boolean {\n    return typeof name === 'string';\n  }\n\n  public applyTo(context: any, name: string) {\n    context[name] = this;\n  }\n\n  public goto(name: string | Array<string>): Namespace {\n    let context: any = this;\n    if (name && name.length) {\n      const parts = this.parseName(name);\n      for (const part of parts) {\n        context = context[part];\n      }\n    }\n    return context;\n  }\n}\n"],"names":["name","this","validate","p","parseName","n","shift","init","Namespace","Default","applyTo","Array","isArray","split","filter","x","trim","Error","context","length","parts_1","_i"],"mappings":";;;;;;2BAIE,WAAYA,GACVC,KAAKC,SAASF,GACd,IAAMG,EAAIF,KAAKG,UAAUJ,GACnBK,EAAIF,EAAEG,QACRL,KAAKM,KAAKF,IACD,IAAIG,EAAUC,QAAQN,GAC9BO,QAAQT,KAAMI,IAgCvB,OA5BUG,sBAAR,SAAkBR,GAChB,OAAOW,MAAMC,QAAQZ,GAAQA,EAAOA,EAAKa,MAAM,eAAeC,QAAO,SAAAC,GAAK,SAAEA,KAAOA,EAAEC,WAG7ER,qBAAV,SAAmBR,GACjB,IAAKA,EACH,MAAM,IAAIiB,MAAM,sCAIVT,iBAAV,SAAeR,GACb,OAAuB,iBAATA,GAGTQ,oBAAP,SAAeU,EAAclB,GAC3BkB,EAAQlB,GAAQC,OAGXO,iBAAP,SAAYR,GACV,IAAIkB,EAAejB,KACnB,GAAID,GAAQA,EAAKmB,OAEf,IADA,QACmBC,EADLnB,KAAKG,UAAUJ,GACVqB,WAAAA,IAAO,CACxBH,EAAUA,SAGd,OAAOA,GAtCFV,UAAUA;;;;;;;;"}